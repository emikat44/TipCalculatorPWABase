@page "/"
@using DemoPWA4.Shared.Models
@using DemoPWA4.Shared.Components
@using Microsoft.Extensions.Hosting;
@using System.Windows;


<style>
    div.myPage {
        font-weight: bolder;
        font-size: x-large
    }

    /* inputCurrencyComponent Styles */
    div.e-numeric.e-input-group.e-control-container.e-control-wrapper.e-float-input.valid label {
        font-weight:bolder;
        font-size:larger
    }

    /* SfNumericTextBox Styles */
    .e-numeric.e-input-group.e-control-container.e-control-wrapper {
        width: auto
    } 

    /*SfRadioButton Styles*/
    div.e-radio-wrapper.e-wrapper label span.e-label{
        font-weight:bold;
        font-size:medium
    }

    /*SfCheckbox Styles*/
    div.e-checkbox-wrapper.e-wrapper label span.e-label {
        font-weight: bold;
        font-size: medium
    }

    /* Custom color Switch */
    .e-switch-wrapper.bar-color .e-switch-inner.e-switch-active,
    .e-switch-wrapper.bar-color:hover .e-switch-inner.e-switch-active .e-switch-on {
        background-color: #157347;
        border-color: #157347;
    }

    .e-switch-wrapper.bar-color .e-switch-inner,
    .e-switch-wrapper.bar-color .e-switch-off {
        background-color: #157347;
        border-color: #157347;
    }

    .e-switch-wrapper .e-switch-on, .e-css.e-switch-wrapper .e-switch-on {
        background-color: #157347;
        border-color: #157347;
    }

    .e-switch-wrapper.bar-color .e-switch-handle {
        background-color: #fff;
    }

    .e-switch-wrapper .e-switch-off, .e-css.e-switch-wrapper .e-switch-off {
        color: #fff
    }

    /*Tip Slider styling*/
    #oval_slider.e-control.e-slider .e-handle {
        height: 25px;
        width: 8px;
        top: 3px;
        border-radius: 15px;
        background-color: #157347;
        border-color: #157347;
    }
    #oval_slider.e-control.e-slider.e-lib div.e-slider-track {
        background-color: #8ab9a3
    }
    #oval_slider.e-control.e-slider.e-lib ul.e-scale.e-h-scale.e-tick-after {
        font-weight:bolder;
    }

    .prePostTaxSwitch{
        font-size:medium
    }
    .labelLarge {
        font-size:large;
    }

    .labelMedium {
        font-size: medium;
    }

        
</style>
 

<div class="myPage">


    <EditForm Model=myTipInputs OnValidSubmit="@CalculateTip">
        <DataAnnotationsValidator />
         <ValidationSummary />
        
        <div class="prePostTaxSwitch">
            <label>Tip based on Pre-Tax Subtotal</label>
            <SfSwitch CssClass="bar-color" @bind-Checked="myTipInputs.tipByPostTaxTotal"></SfSwitch>
            <label>Tip based on Post-Tax Total</label>
        </div>
         @if (myTipInputs.tipByPostTaxTotal)
        {
            <InputCurrencyComponent placeHolder="Enter Post-Tax Total" @bind-MoneyValue="@myTipInputs.preTipTotal" onChange="nullTipValues"></InputCurrencyComponent>
        }
        @if (!myTipInputs.tipByPostTaxTotal)
        {
            <InputCurrencyComponent placeHolder="Enter Pre-Tax Subtotal" @bind-MoneyValue="@myTipInputs.preTipTotal" onChange="nullTipValues"></InputCurrencyComponent>
            <InputCurrencyComponent placeHolder="Enter Tax Amount" @bind-MoneyValue="@myTipInputs.taxAmount"></InputCurrencyComponent>
        }

        <br />
        <br />
        <div>
            <label class="labelLarge">Select Tip Amount: </label>
            <SfSwitch CssClass="bar-color" @bind-Checked="myTipInputs.tipByPercent" OnLabel="%" OffLabel="$" ></SfSwitch>
        </div>
 
        
        @if (myTipInputs.tipByPercent)
        {
            <SfSlider ID="oval_slider" Min="0" Max="30" TValue="decimal?" ShowButtons="false" @bind-Value="myTipInputs.selectedTipPercent">
                <SliderTicks Placement="Placement.After" ShowSmallTicks="true" LargeStep="5" SmallStep="1"></SliderTicks>
                <SliderTooltip IsVisible="true" ShowOn="TooltipShowOn.Always" Placement="TooltipPlacement.Before"></SliderTooltip>
            </SfSlider>
            <SfNumericTextBox TValue="decimal?" @bind-Value=myTipInputs.selectedTipPercent Format="n0"></SfNumericTextBox>
        }
        @if (!myTipInputs.tipByPercent)
        {
            <InputCurrencyComponent placeHolder="Enter $ Tip Amount" @bind-MoneyValue="@myTipInputs.selectedTipDollarAmount"></InputCurrencyComponent><br />
            @if(myTipInputs.selectedTipDollarAmount>0) {
                <label>$@myTipInputs.selectedTipDollarAmount is @getSelectedTipPercent() of receipt total</label>
            }
        }
        <br />
        <SfCheckBox Label="Round Total to Nearest Dollar?" @bind-Checked="myTipInputs.roundTotal" Disabled=@(myTipInputs.preTipTotal==null || (myTipInputs.selectedTipPercent==null && myTipInputs.selectedTipDollarAmount==null))></SfCheckBox>
        @if (myTipInputs.roundTotal)
        {
           <br /> <label class="labelMedium">This will update the tip amount to @getCalculatedTipPercent().caluclatedTipPercent % of receipt total</label>
        }
        <br />
        <SfButton CssClass="e-success" type="submit">Calculate Total</SfButton>
        <br />
        <br />
        <div >
            Tip Amount: $@finalCalculatedTipAmount?.ToString("0.00")
            <br />
            Total: $@finalPostTipTotal?.ToString("0.00")
        </div>

    </EditForm>

@*     <SfUploader AutoUpload="true" AllowedExtensions=".png, .jpeg, .pdf, .gif, .heic">
        <UploaderEvents ValueChange="@OnImageChange" ></UploaderEvents>
    </SfUploader> *@
        
</div>

@code
{
    public TipInputs myTipInputs { get; set; } = new TipInputs();

    public decimal? finalCalculatedTipAmount { get; set; }
    public decimal? finalPostTipTotal { get; set; }


    protected CustomFormValidator customFormValidator;

    public class TotalValues
    {
        public decimal postTipTotal { get; set; }
        public decimal calculatedTipAmount { get; set; }
        public decimal? caluclatedTipPercent { get; set; }
    }

    private TotalValues getCalculatedTotals()
    {
        TotalValues result = new TotalValues();

        decimal preTipTotal = (myTipInputs.preTipTotal != null) ? (decimal)myTipInputs.preTipTotal : 0;
        decimal selectedTipPercent = (myTipInputs.selectedTipPercent != null) ? (decimal)myTipInputs.selectedTipPercent : 0;
        decimal selectedTipDollarAmount = (myTipInputs.selectedTipDollarAmount != null) ? (decimal)myTipInputs.selectedTipDollarAmount : 0;

        decimal postTipTotal;
        decimal calculatedTipAmount;

        if (myTipInputs.tipByPercent)
        {
            postTipTotal = Math.Round(preTipTotal + preTipTotal * (selectedTipPercent / (decimal)100), 2);
            calculatedTipAmount = Math.Round(preTipTotal * (selectedTipPercent / (decimal)100), 2);
        }
        else
        {
            calculatedTipAmount = Math.Round(selectedTipDollarAmount, 2);
            postTipTotal = Math.Round(preTipTotal + (decimal)calculatedTipAmount, 2);
        }

        result.postTipTotal = postTipTotal;
        result.calculatedTipAmount = calculatedTipAmount;

        return result;

    }

    private void CalculateTip()
    {
        Console.WriteLine(typeof(ValidationSummary));

        if(!myTipInputs.roundTotal)
        {
            TotalValues finalValues = getCalculatedTotals();
            finalCalculatedTipAmount = finalValues.calculatedTipAmount;
            if (myTipInputs.tipByPostTaxTotal)
            {
                finalPostTipTotal = finalValues.postTipTotal;
            }
            else
            {
                finalPostTipTotal = finalValues.postTipTotal + myTipInputs.taxAmount;
            }
        }
        if (myTipInputs.roundTotal)
        {
            TotalValues finalValues = getCalculatedTipPercent();
            finalCalculatedTipAmount = finalValues.calculatedTipAmount;
            finalPostTipTotal = finalValues.postTipTotal;
        }

    }

    private void nullTipValues()
    {

        myTipInputs.roundTotal = false;
        myTipInputs.selectedTipPercent = null; 
        myTipInputs.selectedTipDollarAmount = null;
    }

    private string getSelectedTipPercent()
    {
        decimal preTipTotal = (myTipInputs.preTipTotal != null) ? (decimal)myTipInputs.preTipTotal : 1;
        decimal selectedTipDollarAmount = (myTipInputs.selectedTipDollarAmount != null) ? (decimal)myTipInputs.selectedTipDollarAmount : 0;

        myTipInputs.selectedTipPercent = Math.Round(selectedTipDollarAmount / preTipTotal * (decimal)100, 1);
        return myTipInputs.selectedTipPercent.ToString() + "%";
    }

    private TotalValues getCalculatedTipPercent()
    {
        TotalValues finalValues = getCalculatedTotals();

        decimal preTipTotal = (myTipInputs.preTipTotal != null) ? (decimal)myTipInputs.preTipTotal : 1;
        decimal taxAmount = (myTipInputs.taxAmount != null) ? (decimal)myTipInputs.taxAmount : 0;


        decimal updatedTotal;
        decimal difference;
        if (myTipInputs.tipByPostTaxTotal)
        {
            updatedTotal = Math.Ceiling(finalValues.postTipTotal); 
            difference = updatedTotal - finalValues.postTipTotal;
        }
        else { 
            updatedTotal = Math.Ceiling(finalValues.postTipTotal+taxAmount); 
            difference = updatedTotal - finalValues.postTipTotal-taxAmount;
        }

        decimal updatedTipAmount = finalValues.calculatedTipAmount + difference;
        decimal updatedTipPercent = Math.Round((updatedTipAmount / preTipTotal) * 100, 1);

        TotalValues updatedValues = new TotalValues { calculatedTipAmount = updatedTipAmount, postTipTotal = updatedTotal, caluclatedTipPercent=updatedTipPercent };

        return updatedValues;
    }


    // private async Task OnImageChange(UploadChangeEventArgs args)
    // {
    //     try
    //     {
    //         //string rootpath = httpContextAccessor.BaseAddress.ToString();
    //         //string rootpath = HttpContext.Current.Server.MapPath("~/wwwroot");
    //         //string rootpath = (string)AppDomain.CurrentDomain.GetData("ContentRootPath");
    //         string rootpath = Directory.GetCurrentDirectory();
    //         Console.WriteLine("Current directory path: " +
    //                   System.IO.Directory.GetCurrentDirectory());
    //         Console.WriteLine("2Current directory path: " +
    //                               System.Windows.Forms.Application.StartupPath);


    //         foreach (var file in args.Files)
    //         {

    //             // if (File.Exists(Path.Combine(@"rootPath", file.FileInfo.Name)))
    //             // {
    //             //     File.Delete(Path.Combine(@"rootPath", file.FileInfo.Name));
    //             // }
    //             var path = "@"+ rootpath + file.FileInfo.Name;
    //             Console.WriteLine("file: " + file.FileInfo.Name + "; path: " + path);
    //             FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.Write);
    //             await file.File.OpenReadStream(long.MaxValue).CopyToAsync(filestream);
    //             filestream.Close();
    //         }

    //     }
    //     catch (Exception ex)
    //     {
    //         Console.WriteLine(ex.Message);
    //     }
    // }

    



}
