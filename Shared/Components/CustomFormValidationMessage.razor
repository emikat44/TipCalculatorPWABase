@implements IDisposable

@foreach (var message in CurrentEditContext.GetValidationMessages(_fieldIdentifier))
{
    <div class="validation-message">
        @message
    </div>
}

@code {
    [CascadingParameter] EditContext CurrentEditContext { get; set; } = default!;
    [Parameter, EditorRequired] public object Model { get; set; } = default!;
    [Parameter, EditorRequired] public string FieldName { get; set; } = default!;

    private readonly EventHandler<ValidationStateChangedEventArgs>? _validationStateChangedHandler;
    private FieldIdentifier _fieldIdentifier => new FieldIdentifier(this.Model, this.FieldName);
    private EditContext? _previousEditContext;

    public CustomFormValidationMessage()
        => _validationStateChangedHandler = (sender, eventArgs) => StateHasChanged();

    protected override void OnParametersSet()
    {
        if (CurrentEditContext == null)
            throw new InvalidOperationException($"{GetType()} requires a cascading parameter " +
                $"of type {nameof(EditContext)}. For example, you can use {GetType()} inside " +
                $"an {nameof(EditForm)}.");

        if (CurrentEditContext != _previousEditContext)
        {
            DetachValidationStateChangedListener();
            CurrentEditContext.OnValidationStateChanged += _validationStateChangedHandler;
            _previousEditContext = CurrentEditContext;
        }
    }
    protected virtual void Dispose(bool disposing) { }

    void IDisposable.Dispose()
    {
        DetachValidationStateChangedListener();
        Dispose(disposing: true);
    }

    private void DetachValidationStateChangedListener()
    {
        if (_previousEditContext != null)
            _previousEditContext.OnValidationStateChanged -= _validationStateChangedHandler;
    }
}
